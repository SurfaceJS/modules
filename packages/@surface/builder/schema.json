{
    "$id": "https://github.com/SurfaceJS/surface/blob/master/packages/%40surface/builder/schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "Analyzer": {
            "properties": {
                "analyzerHost": {
                    "description": "Host that will be used in `server` mode to start HTTP server.",
                    "type": "string"
                },
                "analyzerMode": {
                    "description": "Can be 'server', 'static' or 'disabled'. In 'server' mode analyzer will start HTTP server to show bundle report. In 'static' mode single HTML file with bundle report will be generated. In 'json' mode single JSON file with bundle report will be generated In 'disabled' mode you can use this plugin to just generate Webpack Stats JSON file by setting 'generateStatsFile' to true. Defaults to 'server'.",
                    "enum": [
                        "server",
                        "static",
                        "json",
                        "disabled"
                    ]
                },
                "analyzerPort": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "enum": [
                                "auto"
                            ]
                        }
                    ],
                    "description": "Port that will be used in `server` mode to start HTTP server."
                },
                "defaultSizes": {
                    "description": "Module sizes to show in report by default. Should be one of 'stat', 'parsed' or 'gzip'.",
                    "enum": [
                        "parsed",
                        "stat",
                        "gzip"
                    ]
                },
                "excludeAssets": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Patterns that will be used to match against asset names to exclude them from the report."
                },
                "openAnalyzer": {
                    "description": "Automatically open report in default browser.",
                    "type": "boolean"
                },
                "reportFilename": {
                    "description": "Path to bundle report file that will be generated in 'static' mode. Relative to bundles output directory.",
                    "type": "string"
                },
                "reportTitle": {
                    "description": "Content of the HTML title element.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AttributeHandler": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "src",
                        "srcset"
                    ]
                }
            }
        },
        "BuildConfiguration": {
            "additionalProperties": false,
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "else": {
                                "$ref": "#/definitions/FileCacheOptions"
                            },
                            "if": {
                                "properties": {
                                    "type": {
                                        "const": "memory"
                                    }
                                }
                            },
                            "properties": {
                                "type": {
                                    "enum": [
                                        "memory",
                                        "filesystem"
                                    ]
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "then": {
                                "$ref": "#/definitions/MemoryCacheOptions"
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Cache generated modules and chunks to improve performance for multiple incremental builds."
                },
                "optimization": {
                    "$ref": "#/definitions/Optimization",
                    "description": ""
                },
                "overrides": {
                    "$ref": "#/definitions/Overrides",
                    "description": "Overrides files during compilation."
                },
                "performance": {
                    "$ref": "#/definitions/Performance",
                    "description": "Configuration for web performance recommendations."
                },
                "variables": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Accepts an array with the environment variables that will be used or an object with the variables and their default values."
                }
            },
            "type": "object"
        },
        "DevServer": {
            "properties": {
                "compress": {
                    "description": "Enable gzip compression for everything served.",
                    "type": "boolean"
                },
                "host": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "enum": [
                                "local-ip",
                                "local-ipv4",
                                "local-ipv6"
                            ]
                        }
                    ],
                    "description": "Specify a host to use. By default this is localhost."
                },
                "hot": {
                    "description": "Enable webpack's Hot Module Replacement feature.",
                    "enum": [
                        true,
                        false,
                        "only"
                    ]
                },
                "liveReload": {
                    "description": "By default, the dev-server will reload/refresh the page when file changes are detected. devServer.hot option must be disabled or devServer.watchContentBase option must be enabled in order for liveReload to take effect. Disable devServer.liveReload by setting it to false.",
                    "type": "boolean"
                },
                "open": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "$ref": "#/definitions/Open"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/Open"
                            }
                        }
                    ],
                    "description": "When open is enabled, the dev server will open the browser."
                },
                "port": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "enum": [
                                "auto"
                            ]
                        }
                    ],
                    "description": "Specify a port number to listen for requests on."
                }
            },
            "type": "object"
        },
        "Entry": {
            "anyOf": [
                {
                    "$ref": "#/definitions/StringOrStringArray"
                },
                {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "type": "object"
                }
            ]
        },
        "Eslint": {
            "properties": {
                "configFile": {
                    "description": "The configuration file to use. Notes that paths resolution applied in config file is relative to cwd.",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "Enables ESLint linter.",
                    "type": "boolean"
                },
                "files": {
                    "$ref": "#/definitions/StringOrStringArray",
                    "description": "Specify directories, files, or globs."
                },
                "formatter": {
                    "description": "Formatter used by ESLint.",
                    "enum": [
                        "checkstyle",
                        "codeframe",
                        "compact",
                        "html",
                        "jslint-xml",
                        "json-with-metadata",
                        "json",
                        "junit",
                        "stylish",
                        "table",
                        "tap",
                        "unix",
                        "visualstudio"
                    ]
                }
            }
        },
        "FileCacheOptions": {
            "properties": {
                "cacheDirectory": {
                    "description": "Base directory for the cache (defaults to node_modules/.cache/webpack).",
                    "type": "string"
                },
                "name": {
                    "description": "Name for the cache. Different names will lead to different coexisting caches.",
                    "type": "string"
                },
                "type": {
                    "description": "Filesystem caching.",
                    "enum": [
                        "filesystem"
                    ]
                }
            }
        },
        "HTMLXMode": {
            "description": "Compilation mode of templates used by @surface/htmlx. * aot: Tree shakeble. All templates will be compiled at build time. Attempting to use runtime templates will raise an error. * mixed: Non tree shakeble. All templates will be compiled at build time, but it will also be possible to compile at run time. * runtime: Non tree shakeble. All templates will be compiled at runtime.",
            "enum": [
                "aot",
                "mixed",
                "runtime"
            ]
        },
        "HTMLXOptions": {
            "properties": {
                "attributeHandlers": {
                    "description": "Set attributes that need special resolution. Like the attributes src and srcset of tag img.",
                    "items": {
                        "$ref": "#/definitions/AttributeHandler"
                    },
                    "type": "array"
                },
                "mode": {
                    "$ref": "#/definitions/HTMLXMode"
                }
            }
        },
        "IncludeFiles": {
            "description": "File patterns to copy to output path.",
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "properties": {
                            "from": {
                                "type": "string"
                            },
                            "to": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "type": "array"
        },
        "Logging": {
            "description": "Log level.",
            "enum": [
                true,
                false,
                "none",
                "summary",
                "errors-only",
                "errors-warnings",
                "minimal",
                "normal",
                "detailed",
                "verbose"
            ]
        },
        "MemoryCacheOptions": {
            "properties": {
                "maxGenerations": {
                    "description": "Number of generations unused cache entries stay in memory cache at minimum (1 = may be removed after unused for a single compilation, ..., Infinity: kept forever).",
                    "type": "number"
                },
                "type": {
                    "description": "In memory caching.",
                    "enum": [
                        "memory"
                    ]
                }
            }
        },
        "Mode": {
            "enum": [
                "development",
                "production"
            ]
        },
        "Open": {
            "properties": {
                "app": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "$ref": "#/definitions/OpenApp"
                        }
                    ],
                    "description": "Open specified browser."
                },
                "target": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "description": "Opens specified page in browser."
                }
            }
        },
        "OpenApp": {
            "properties": {
                "arguments": {
                    "type": "string"
                },
                "name": {
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Optimization": {
            "description": "",
            "properties": {
                "chunkIds": {
                    "description": "Define the algorithm to choose chunk ids (named: readable ids for better debugging, deterministic: numeric hash ids for better long term caching, size: numeric ids focused on minimal initial download size, total-size: numeric ids focused on minimal total download size, false: no algorithm used, as custom one can be provided via plugin).",
                    "enum": [
                        false,
                        "natural",
                        "named",
                        "deterministic",
                        "size",
                        "total-size"
                    ]
                },
                "concatenateModules": {
                    "description": "Concatenate modules when possible to generate less modules, more efficient code and enable more optimizations by the minimizer.",
                    "type": "boolean"
                },
                "emitOnErrors": {
                    "description": "Emit assets even when errors occur. Critical errors are emitted into the generated code and will cause errors at runtime.",
                    "type": "boolean"
                },
                "flagIncludedChunks": {
                    "description": "Also flag chunks as loaded which contain a subset of the modules.",
                    "type": "boolean"
                },
                "mangleExports": {
                    "description": "Also flag chunks as loaded which contain a subset of the modules.",
                    "enum": [
                        true,
                        false,
                        "deterministic",
                        "size"
                    ]
                },
                "mergeDuplicateChunks": {
                    "description": "Merge chunks which contain the same modules.",
                    "type": "boolean"
                },
                "minimize": {
                    "description": "Enable minimizing the output. Uses optimization.minimizer.",
                    "type": "boolean"
                },
                "moduleIds": {
                    "description": "Define the algorithm to choose module ids (natural: numeric ids in order of usage, named: readable ids for better debugging, hashed: (deprecated) short hashes as ids for better long term caching, deterministic: numeric hash ids for better long term caching, size: numeric ids focused on minimal initial download size, false: no algorithm used, as custom one can be provided via plugin).",
                    "enum": [
                        false,
                        "natural",
                        "named",
                        "deterministic",
                        "size",
                        "hashed"
                    ]
                },
                "providedExports": {
                    "description": "Figure out which exports are provided by modules to generate more efficient code.",
                    "type": "boolean"
                },
                "usedExports": {
                    "description": "Figure out which exports are used by modules to mangle export names, omit unused exports and generate more efficient code (true: analyse used exports for each runtime, 'global': analyse exports globally for all runtimes combined).",
                    "enum": [
                        true,
                        false,
                        "global"
                    ]
                }
            }
        },
        "Overrides": {
            "items": {
                "additionalProperties": false,
                "properties": {
                    "replace": {
                        "type": "string"
                    },
                    "with": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "Performance": {
            "properties": {
                "hints": {
                    "description": "Sets the format of the hints: warnings, errors or nothing at all.",
                    "enum": [
                        false,
                        "error",
                        "warning"
                    ]
                },
                "maxAssetSize": {
                    "description": "File size limit (in bytes) when exceeded, that webpack will provide performance hints.",
                    "type": "number"
                },
                "maxEntrypointSize": {
                    "description": "Total size of an entry point (in bytes).",
                    "type": "number"
                }
            }
        },
        "PreferTs": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            ],
            "description": "Resolve to the ts file when next to the transpiled js file."
        },
        "Project": {
            "additionalProperties": false,
            "description": "Project settings.",
            "properties": {
                "analyzer": {
                    "$ref": "#/definitions/Analyzer",
                    "description": "Bundler analyzer configuration."
                },
                "context": {
                    "description": "The base directory for resolving the entry option.",
                    "type": "string"
                },
                "dependencies": {
                    "description": "References to other projects to depend on.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "entry": {
                    "$ref": "#/definitions/Entry",
                    "description": "Entry points."
                },
                "environments": {
                    "description": "Configurations by mode. Use to override some defaults.",
                    "properties": {
                        "development": {
                            "$ref": "#/definitions/BuildConfiguration"
                        },
                        "production": {
                            "$ref": "#/definitions/BuildConfiguration"
                        }
                    },
                    "type": "object"
                },
                "eslint": {
                    "$ref": "#/definitions/Eslint",
                    "description": "Eslint options."
                },
                "filename": {
                    "description": "The filename of the entry chunk as relative path inside the output path directory.",
                    "type": "string"
                },
                "htmlx": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HTMLXMode"
                        },
                        {
                            "$ref": "#/definitions/HTMLXOptions"
                        }
                    ]
                },
                "includeFiles": {
                    "$ref": "#/definitions/IncludeFiles",
                    "description": "File patterns to copy to output path."
                },
                "index": {
                    "description": "Path to html template file.",
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/Mode",
                    "description": "Enable production optimizations or development hints."
                },
                "output": {
                    "description": "The output directory.",
                    "type": "string"
                },
                "preferTs": {
                    "$ref": "#/definitions/PreferTs",
                    "description": "Resolve to the ts file when next to the transpiled js file."
                },
                "publicPath": {
                    "description": "The output path from the view of the Javascript / HTML page.",
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/Target",
                    "description": "Environment to build for."
                },
                "tsconfig": {
                    "description": "Path to tsconfig file.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StringOrBoolean": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "boolean"
                }
            ]
        },
        "StringOrStringArray": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            ]
        },
        "Target": {
            "enum": [
                "pwa",
                "web",
                "webworker"
            ]
        }
    },
    "description": "Surface's builder options.",
    "properties": {
        "$schema": {
            "description": "The schema to verify this document against.",
            "type": "string"
        },
        "clean": {
            "description": "Enables clean builds. Note that clean builds can lead to unexpected results for projects with same output.",
            "type": "boolean"
        },
        "devServer": {
            "$ref": "#/definitions/DevServer",
            "description": "Dev Server configuration."
        },
        "logging": {
            "$ref": "#/definitions/Logging",
            "description": "Log level."
        },
        "main": {
            "description": "Main project. Used by dev server.",
            "type": "string"
        },
        "projects": {
            "additionalProperties": {
                "$ref": "#/definitions/Project"
            },
            "description": "Project map.",
            "type": "object"
        }
    },
    "title": "Surface's builder options"
}