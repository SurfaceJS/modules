/* eslint-disable no-empty-character-class */
/* eslint-disable no-control-regex */
const skip = false;

export type Scenario =
{
    pattern:   string,
    matches:   string[],
    regex:     RegExp,
    unmatches: string[],
    skip:      boolean,
};

export const scenarios: Scenario[] =
[
    {
        skip,
        pattern:   "",
        regex:     /^$/,
        matches:   [],
        unmatches: ["bar"],
    },
    {
        skip,
        pattern:   "foo",
        regex:     /^foo$/,
        matches:   ["foo"],
        unmatches: ["bar"],
    },
    {
        skip,
        pattern:   "?oo",
        regex:     /^.oo$/,
        matches:   ["boo", "foo"],
        unmatches: ["oo"],
    },
    {
        skip,
        pattern:   "*",
        regex:     /^[^\/\\]*$/,
        matches:   ["boo", "foo"],
        unmatches: [],
    },
    {
        skip,
        pattern:   "*oo",
        regex:     /^[^\/\\]*oo$/,
        matches:   ["boo", "foo"],
        unmatches: ["oof"],
    },
    {
        skip,
        pattern:   "[fb]oo",
        regex:     /^[fb]oo$/,
        matches:   ["boo", "foo"],
        unmatches: ["too", "soo"],
    },
    {
        skip,
        pattern:   "[^fb]oo",
        regex:     /^[^fb]oo$/,
        matches:   ["too", "soo"],
        unmatches: ["boo", "foo"],
    },
    {
        skip,
        pattern:   "[!fb]oo",
        regex:     /^[^fb]oo$/,
        matches:   ["too", "soo"],
        unmatches: ["boo", "foo"],
    },
    {
        skip,
        pattern:   "[]",
        regex:     /^[]$/,
        matches:   [],
        unmatches: ["", "."],
    },
    {
        skip,
        pattern:   "[[]oo",
        regex:     /^[\[]oo$/,
        matches:   ["[oo"],
        unmatches: ["]oo"],
    },
    {
        skip,
        pattern:   "[]]oo",
        regex:     /^[\]]oo$/,
        matches:   ["]oo"],
        unmatches: ["[oo"],
    },
    {
        skip,
        pattern:   "[a\\]]oo",
        regex:     /^[a\]]oo$/,
        matches:   ["aoo", "]oo"],
        unmatches: ["a[oo"],
    },
    {
        skip,
        pattern:   "[a-z]]oo",
        regex:     /^[a-z]\]oo$/,
        matches:   ["a]oo"],
        unmatches: ["]oo"],
    },
    {
        skip,
        pattern:   "[a",
        regex:     /^\[a$/,
        matches:   ["[a"],
        unmatches: ["[", "a"],
    },
    {
        skip,
        pattern:   "[:alnum:]",
        regex:     /^[A-Za-z0-9]$/,
        matches:   ["a", "z", "A", "Z", "0", "9"],
        unmatches: [".", "!"],
    },
    {
        skip,
        pattern:   "[:alpha:]",
        regex:     /^[A-Za-z]$/,
        matches:   ["a", "z", "A", "Z"],
        unmatches: ["1", "."],
    },
    {
        skip,
        pattern:   "[:ascii:]",
        regex:     /^[\x00-\x7F]$/,
        matches:   ["\x00", "\x7F"],
        unmatches: ["\x8A"],
    },
    {
        skip,
        pattern:   "[:blank:]",
        regex:     /^[ \t]$/,
        matches:   ["\t", " "],
        unmatches: ["."],
    },
    {
        skip,
        pattern:   "[:cntrl:]",
        regex:     /^[\x00-\x1F\x7F]$/,
        matches:   ["\x00", "\x1F", "\x7F"],
        unmatches: ["\x2A", "\x8A"],
    },
    {
        skip,
        pattern:   "[:digit:]",
        regex:     /^\d$/,
        matches:   ["0", "9"],
        unmatches: ["A", "Z"],
    },
    {
        skip,
        pattern:   "[:graph:]",
        regex:     /^[\x21-\x7E]$/,
        matches:   ["\x21", "\x7E"],
        unmatches: ["\x20", "\x8A"],
    },
    {
        skip,
        pattern:   "[:lower:]",
        regex:     /^[a-z]$/,
        matches:   ["a", "z"],
        unmatches: ["A", "Z"],
    },
    {
        skip,
        pattern:   "[:print:]",
        regex:     /^[\x20-\x7E]$/,
        matches:   ["\x20", "\x7E"],
        unmatches: ["\x1F", "\x7F"],
    },
    {
        skip,
        pattern:   "[:punct:]",
        regex:     /^[^ A-Za-z0-9]$/,
        matches:   [".", ",", "!", "?"],
        unmatches: ["a", "0"],
    },
    {
        skip,
        pattern:   "[:space:]",
        regex:     /^\s$/,
        matches:   [" "],
        unmatches: ["a"],
    },
    {
        skip,
        pattern:   "[:upper:]",
        regex:     /^[A-Z]$/,
        matches:   ["A", "Z"],
        unmatches: ["a", "z"],
    },
    {
        skip,
        pattern:   "[:word:]",
        regex:     /^\w$/,
        matches:   ["A", "0", "_"],
        unmatches: ["-", "."],
    },
    {
        skip,
        pattern:   "[:xdigit:]",
        regex:     /^[0-9a-fA-F]$/,
        matches:   ["0", "F", "C"],
        unmatches: ["G", "10"],
    },
    {
        skip,
        pattern:   "{a,b}",
        regex:     /^(?:a|b)$/,
        matches:   ["a", "b"],
        unmatches: ["(a|b)"],
    },
    {
        skip,
        pattern:   "{a..c}",
        regex:     /^(?:[a-c])$/,
        matches:   ["a", "b", "c"],
        unmatches: ["d"],
    },
    {
        skip,
        pattern:   "{Z..a}",
        regex:     /^(?:[Z[\]\^_`a])$/,
        matches:   ["Z", "[", "]", "^", "_", "`", "a"],
        unmatches: ["A", "z"],
    },
    {
        skip,
        pattern:   "{A..z..6}",
        regex:     /^(?:[AGMSY_ekqw])$/,
        matches:   ["A", "G", "M", "S", "Y", "_", "e", "k", "q", "w"],
        unmatches: ["B", "F", "b", "f"],
    },
    {
        skip,
        pattern:   "(a|b)",
        regex:     /^\(a\|b\)$/,
        matches:   ["(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "@(a",
        regex:     /^@\(a$/,
        matches:   ["@(a"],
        unmatches: ["@", "(", "a"],
    },
    {
        skip,
        pattern:   "@(a|b)",
        regex:     /^(?:a|b)$/,
        matches:   ["a", "b"],
        unmatches: ["c"],
    },
    {
        skip:      false,
        pattern:   "@(@(a|b))",
        regex:     /^(?:(?:a|b))$/,
        matches:   ["a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "@(a\\|b)",
        regex:     /^(?:a\|b)$/,
        matches:   ["a|b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "@((a\\|b))",
        regex:     /^(?:\(a\|b\))$/,
        matches:   ["(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "@((a\\|b\\)|@(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)|a\|b)$/,
        matches:   ["(a|b)", "a|b", "a", "b"],
        unmatches: ["ab"],
    },
    {
        skip,
        pattern:   "?(a|b)",
        regex:     /^(?:a|b)?$/,
        matches:   ["", "a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "?(?(a|b))",
        regex:     /^(?:(?:a|b)?)?$/,
        matches:   ["", "a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "?(a\\|b)",
        regex:     /^(?:a\|b)?$/,
        matches:   ["", "a|b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "?((a\\|b))",
        regex:     /^(?:\(a\|b\))?$/,
        matches:   ["", "(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "?((a\\|b\\)|?(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)?|a\|b)?$/,
        matches:   ["", "(a|b)", "a|b", "a", "b"],
        unmatches: ["ab"],
    },
    {
        skip,
        pattern:   "*(a|b)",
        regex:     /^(?:a|b)*$/,
        matches:   ["", "a", "b", "aa", "bb"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "*(*(a|b))",
        regex:     /^(?:(?:a|b)*)*$/,
        matches:   ["", "a", "b", "aa", "bb"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "*(a\\|b)",
        regex:     /^(?:a\|b)*$/,
        matches:   ["", "a|b", "a|ba|b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "*((a\\|b))",
        regex:     /^(?:\(a\|b\))*$/,
        matches:   ["", "(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "*((a\\|b\\)|*(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)*|a\|b)*$/,
        matches:
        [
            "",
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "aa",
            "bb",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
        unmatches: ["|"],
    },
    {
        skip,
        pattern:   "+(a|b)",
        regex:     /^(?:a|b)+$/,
        matches:   ["a", "b", "aa", "bb"],
        unmatches: ["", "c"],
    },
    {
        skip,
        pattern:   "+(+(a|b))",
        regex:     /^(?:(?:a|b)+)+$/,
        matches:   ["a", "b", "aa", "bb"],
        unmatches: ["", "c"],
    },
    {
        skip,
        pattern:   "+(a\\|b)",
        regex:     /^(?:a\|b)+$/,
        matches:   ["a|b", "a|ba|b"],
        unmatches: ["", "a", "b"],
    },
    {
        skip,
        pattern:   "+((a\\|b))",
        regex:     /^(?:\(a\|b\))+$/,
        matches:   ["(a|b)"],
        unmatches: ["", "a", "b"],
    },
    {
        skip,
        pattern:   "+((a\\|b\\)|+(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)+|a\|b)+$/,
        matches:
        [
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "aa",
            "bb",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
        unmatches: [""],
    },
    {
        skip,
        pattern:   "!(a|b)",
        regex:     /^(?:(?!a|b).*)$/,
        matches:   ["c"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "!(!(a|b))",
        regex:     /^(?:(?!(?:(?!a|b).*)).*)$/,
        matches:   ["a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "!(a\\|b)",
        regex:     /^(?:(?!a\|b).*)$/,
        matches:   ["", "a", "b"],
        unmatches: ["a|b", "a|ba|b"],
    },
    {
        skip,
        pattern:   "!((a\\|b))",
        regex:     /^(?:(?!\(a\|b\)).*)$/,
        matches:   ["", "a", "b"],
        unmatches: ["(a|b)"],
    },
    {
        skip,
        pattern:   "!((a\\|b\\)|!(a|b)|a\\|b)",
        regex:     /^(?:(?!\(a\|b\)|(?:(?!a|b).*)|a\|b).*)$/,
        matches:
        [
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "aa",
            "bb",
        ],
        unmatches:
        [
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
    },
    {
        skip,
        pattern:   "/foo",
        regex:     /^(?:\/|\\)foo$/,
        matches:   ["/foo"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "/foo/*",
        regex:     /^(?:\/|\\)foo(?:\/|\\)[^\/\\]*$/,
        matches:   ["/foo/bar"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "/foo/*/bar",
        regex:     /^(?:\/|\\)foo(?:\/|\\)[^\/\\]*(?:\/|\\)bar$/,
        matches:   ["/foo/baz/bar"],
        unmatches: ["/foo", "bar", "/foo/bar", "/foo/baz/baz/bar"],
    },
    {
        skip,
        pattern:   "/foo/**",
        regex:     /^(?:\/|\\)foo(?:\/|\\).*(?:\/|\\)?$/,
        matches:   ["/foo/bar", "/foo/bar/baz"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "**/foo",
        regex:     /^.*(?:\/|\\)?foo$/,
        matches:   ["bar/foo"],
        unmatches: ["bar"],
    },
    {
        skip,
        pattern:   "**/foo/**",
        regex:     /^.*(?:\/|\\)?foo(?:\/|\\).*(?:\/|\\)?$/,
        matches:   ["bar/foo/bar"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "**/foo/**/bar",
        regex:     /^.*(?:\/|\\)?foo(?:\/|\\).*(?:\/|\\)?bar$/,
        matches:   ["bar/foo/bar", "bar/foo/baz/bar"],
        unmatches: ["foo", "bar", "bar/foobar/bar"],
    },
];
