/* eslint-disable max-lines */
/* eslint-disable no-empty-character-class */
/* eslint-disable no-control-regex */
const skip = false;

export type Scenario =
{
    pattern:   string,
    matches:   string[],
    regex:     RegExp,
    unmatches: string[],
    skip:      boolean,
};

export const scenarios: Scenario[] =
[
    {
        skip,
        pattern:   "",
        regex:     /^$/,
        matches:   [],
        unmatches: ["bar"],
    },
    {
        skip,
        pattern:   "foo",
        regex:     /^foo$/,
        matches:   ["foo"],
        unmatches: ["bar"],
    },
    {
        skip,
        pattern:   "?oo",
        regex:     /^.oo$/,
        matches:   ["boo", "foo"],
        unmatches: ["oo"],
    },
    {
        skip,
        pattern:   "*",
        regex:     /^[^\/\\]*$/,
        matches:   ["boo", "foo"],
        unmatches: [],
    },
    {
        skip,
        pattern:   "*oo",
        regex:     /^[^\/\\]*oo$/,
        matches:   ["boo", "foo"],
        unmatches: ["oof"],
    },
    {
        skip,
        pattern:   "[fb]oo",
        regex:     /^[fb]oo$/,
        matches:   ["boo", "foo"],
        unmatches: ["too", "soo"],
    },
    {
        skip,
        pattern:   "[^fb]oo",
        regex:     /^[^fb]oo$/,
        matches:   ["too", "soo"],
        unmatches: ["boo", "foo"],
    },
    {
        skip,
        pattern:   "[!fb]oo",
        regex:     /^[^fb]oo$/,
        matches:   ["too", "soo"],
        unmatches: ["boo", "foo"],
    },
    {
        skip,
        pattern:   "[]",
        regex:     /^[]$/,
        matches:   [],
        unmatches: ["", "."],
    },
    {
        skip,
        pattern:   "[[]oo",
        regex:     /^[\[]oo$/,
        matches:   ["[oo"],
        unmatches: ["]oo"],
    },
    {
        skip,
        pattern:   "[]]oo",
        regex:     /^[\]]oo$/,
        matches:   ["]oo"],
        unmatches: ["[oo"],
    },
    {
        skip,
        pattern:   "[a\\]]oo",
        regex:     /^[a\]]oo$/,
        matches:   ["aoo", "]oo"],
        unmatches: ["a[oo"],
    },
    {
        skip,
        pattern:   "[a-z]]oo",
        regex:     /^[a-z]\]oo$/,
        matches:   ["a]oo"],
        unmatches: ["]oo"],
    },
    {
        skip,
        pattern:   "[a",
        regex:     /^\[a$/,
        matches:   ["[a"],
        unmatches: ["[", "a"],
    },
    {
        skip,
        pattern:   "[:a",
        regex:     /^\[:a$/,
        matches:   ["[:a"],
        unmatches: ["[", ":", "a"],
    },
    {
        skip,
        pattern:   "[:alnum:]",
        regex:     /^[A-Za-z0-9]$/,
        matches:   ["a", "z", "A", "Z", "0", "9"],
        unmatches: [".", "!"],
    },
    {
        skip,
        pattern:   "[:alpha:]",
        regex:     /^[A-Za-z]$/,
        matches:   ["a", "z", "A", "Z"],
        unmatches: ["1", "."],
    },
    {
        skip,
        pattern:   "[:ascii:]",
        regex:     /^[\x00-\x7F]$/,
        matches:   ["\x00", "\x7F"],
        unmatches: ["\x8A"],
    },
    {
        skip,
        pattern:   "[:blank:]",
        regex:     /^[ \t]$/,
        matches:   ["\t", " "],
        unmatches: ["."],
    },
    {
        skip,
        pattern:   "[:cntrl:]",
        regex:     /^[\x00-\x1F\x7F]$/,
        matches:   ["\x00", "\x1F", "\x7F"],
        unmatches: ["\x2A", "\x8A"],
    },
    {
        skip,
        pattern:   "[:digit:]",
        regex:     /^\d$/,
        matches:   ["0", "9"],
        unmatches: ["A", "Z"],
    },
    {
        skip,
        pattern:   "[:graph:]",
        regex:     /^[\x21-\x7E]$/,
        matches:   ["\x21", "\x7E"],
        unmatches: ["\x20", "\x8A"],
    },
    {
        skip,
        pattern:   "[:lower:]",
        regex:     /^[a-z]$/,
        matches:   ["a", "z"],
        unmatches: ["A", "Z"],
    },
    {
        skip,
        pattern:   "[:print:]",
        regex:     /^[\x20-\x7E]$/,
        matches:   ["\x20", "\x7E"],
        unmatches: ["\x1F", "\x7F"],
    },
    {
        skip,
        pattern:   "[:punct:]",
        regex:     /^[^ A-Za-z0-9]$/,
        matches:   [".", ",", "!", "?"],
        unmatches: ["a", "0"],
    },
    {
        skip,
        pattern:   "[:space:]",
        regex:     /^\s$/,
        matches:   [" "],
        unmatches: ["a"],
    },
    {
        skip,
        pattern:   "[:upper:]",
        regex:     /^[A-Z]$/,
        matches:   ["A", "Z"],
        unmatches: ["a", "z"],
    },
    {
        skip,
        pattern:   "[:word:]",
        regex:     /^\w$/,
        matches:   ["A", "0", "_"],
        unmatches: ["-", "."],
    },
    {
        skip,
        pattern:   "[:xdigit:]",
        regex:     /^[0-9a-fA-F]$/,
        matches:   ["0", "F", "C"],
        unmatches: ["G", "10"],
    },
    {
        skip,
        pattern:   "(a|b)",
        regex:     /^\(a\|b\)$/,
        matches:   ["(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "@a",
        regex:     /^@a$/,
        matches:   ["@a"],
        unmatches: ["@", "a"],
    },
    {
        skip,
        pattern:   "@(a",
        regex:     /^@\(a$/,
        matches:   ["@(a"],
        unmatches: ["@", "(", "a"],
    },
    {
        skip,
        pattern:   "@(a|b)",
        regex:     /^(?:a|b)$/,
        matches:   ["a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "@(@(a|b))",
        regex:     /^(?:(?:a|b))$/,
        matches:   ["a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "@(a\\|b)",
        regex:     /^(?:a\|b)$/,
        matches:   ["a|b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "@((a\\|b))",
        regex:     /^(?:\(a\|b\))$/,
        matches:   ["(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "@((a\\|b\\)|@(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)|a\|b)$/,
        matches:   ["(a|b)", "a|b", "a", "b"],
        unmatches: ["ab"],
    },
    {
        skip,
        pattern:   "?(a|b)",
        regex:     /^(?:a|b)?$/,
        matches:   ["", "a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "?(?(a|b))",
        regex:     /^(?:(?:a|b)?)?$/,
        matches:   ["", "a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "?(a\\|b)",
        regex:     /^(?:a\|b)?$/,
        matches:   ["", "a|b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "?((a\\|b))",
        regex:     /^(?:\(a\|b\))?$/,
        matches:   ["", "(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "?((a\\|b\\)|?(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)?|a\|b)?$/,
        matches:   ["", "(a|b)", "a|b", "a", "b"],
        unmatches: ["ab"],
    },
    {
        skip,
        pattern:   "*(a|b)",
        regex:     /^(?:a|b)*$/,
        matches:   ["", "a", "b", "aa", "bb"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "*(*(a|b))",
        regex:     /^(?:(?:a|b)*)*$/,
        matches:   ["", "a", "b", "aa", "bb"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "*(a\\|b)",
        regex:     /^(?:a\|b)*$/,
        matches:   ["", "a|b", "a|ba|b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "*((a\\|b))",
        regex:     /^(?:\(a\|b\))*$/,
        matches:   ["", "(a|b)"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "*((a\\|b\\)|*(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)*|a\|b)*$/,
        matches:
        [
            "",
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "aa",
            "bb",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
        unmatches: ["|"],
    },
    {
        skip,
        pattern:   "+(a|b)",
        regex:     /^(?:a|b)+$/,
        matches:   ["a", "b", "aa", "bb"],
        unmatches: ["", "c"],
    },
    {
        skip,
        pattern:   "+(+(a|b))",
        regex:     /^(?:(?:a|b)+)+$/,
        matches:   ["a", "b", "aa", "bb"],
        unmatches: ["", "c"],
    },
    {
        skip,
        pattern:   "+(a\\|b)",
        regex:     /^(?:a\|b)+$/,
        matches:   ["a|b", "a|ba|b"],
        unmatches: ["", "a", "b"],
    },
    {
        skip,
        pattern:   "+((a\\|b))",
        regex:     /^(?:\(a\|b\))+$/,
        matches:   ["(a|b)"],
        unmatches: ["", "a", "b"],
    },
    {
        skip,
        pattern:   "+((a\\|b\\)|+(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)+|a\|b)+$/,
        matches:
        [
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "aa",
            "bb",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
        unmatches: [""],
    },
    {
        skip,
        pattern:   "!(a|b)",
        regex:     /^(?:(?!a|b).*)$/,
        matches:   ["c"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "!(!(a|b))",
        regex:     /^(?:(?!(?:(?!a|b).*)).*)$/,
        matches:   ["a", "b"],
        unmatches: ["c"],
    },
    {
        skip,
        pattern:   "!(a\\|b)",
        regex:     /^(?:(?!a\|b).*)$/,
        matches:   ["", "a", "b"],
        unmatches: ["a|b", "a|ba|b"],
    },
    {
        skip,
        pattern:   "!((a\\|b))",
        regex:     /^(?:(?!\(a\|b\)).*)$/,
        matches:   ["", "a", "b"],
        unmatches: ["(a|b)"],
    },
    {
        skip,
        pattern:   "!((a\\|b\\)|!(a|b)|a\\|b)",
        regex:     /^(?:(?!\(a\|b\)|(?:(?!a|b).*)|a\|b).*)$/,
        matches:
        [
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "aa",
            "bb",
        ],
        unmatches:
        [
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
    },
    {
        skip,
        pattern:   "/foo",
        regex:     /^(?:\/|\\)foo$/,
        matches:   ["/foo"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "/foo/*",
        regex:     /^(?:\/|\\)foo(?:\/|\\)[^\/\\]*$/,
        matches:   ["/foo/bar"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "/foo/*/bar",
        regex:     /^(?:\/|\\)foo(?:\/|\\)[^\/\\]*(?:\/|\\)bar$/,
        matches:   ["/foo/baz/bar"],
        unmatches: ["/foo", "bar", "/foo/bar", "/foo/baz/baz/bar"],
    },
    {
        skip,
        pattern:   "/foo/**",
        regex:     /^(?:\/|\\)foo(?:\/|\\).*(?:\/|\\)?$/,
        matches:   ["/foo/bar", "/foo/bar/baz"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "**/foo",
        regex:     /^.*(?:\/|\\)?foo$/,
        matches:   ["bar/foo"],
        unmatches: ["bar"],
    },
    {
        skip,
        pattern:   "**/foo/**",
        regex:     /^.*(?:\/|\\)?foo(?:\/|\\).*(?:\/|\\)?$/,
        matches:   ["bar/foo/bar"],
        unmatches: ["foo"],
    },
    {
        skip,
        pattern:   "**/foo/**/bar",
        regex:     /^.*(?:\/|\\)?foo(?:\/|\\).*(?:\/|\\)?bar$/,
        matches:   ["bar/foo/bar", "bar/foo/baz/bar"],
        unmatches: ["foo", "bar", "bar/foobar/bar"],
    },
    {
        skip,
        pattern:   "{a,b",
        regex:     /^\{a,b$/,
        matches:   ["{a,b"],
        unmatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "{a,b}",
        regex:     /^(?:a|b)$/,
        matches:   ["a", "b"],
        unmatches: ["(a|b)"],
    },
    {
        skip,
        pattern:   "a{,b,c}d",
        regex:     /^a(?:b|c)?d$/,
        matches:   ["ad", "abd", "acd"],
        unmatches: ["a", "d", "abcd"],
    },
    {
        skip,
        pattern:   "{a..c}",
        regex:     /^(?:[a-c])$/,
        matches:   ["a", "b", "c"],
        unmatches: ["d"],
    },
    {
        skip,
        pattern:   "{Z..a}",
        regex:     /^(?:[Z[\]\^_`a])$/,
        matches:   ["Z", "[", "]", "^", "_", "`", "a"],
        unmatches: ["A", "z"],
    },
    {
        skip,
        pattern:   "{A..z..6}",
        regex:     /^(?:[AGMSY_ekqw])$/,
        matches:   ["A", "G", "M", "S", "Y", "_", "e", "k", "q", "w"],
        unmatches: ["B", "F", "b", "f"],
    },
    {
        skip,
        pattern: "{-1246..2357}",
        regex:   /^(?:-124[0-6]|-12[0-3][0-9]|-1[0-1][0-9]{2}|(?!-0)(?!0\d)-[0-9]{1,3}|0|235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|(?!0\d)1?[0-9]{1,3})$/,
        matches:
        [
            "-1246",
            "-1240",
            "-1200",
            "-1000",
            "-100",
            "-10",
            "0",
            "10",
            "100",
            "2000",
            "2300",
            "2350",
            "2357",
        ],
        unmatches:
        [
            "-2000",
            "-1300",
            "-1250",
            "-1247",
            "-0",
            "2358",
            "2360",
            "2400",
            "3000",
        ],
    },
    {
        skip,
        pattern:   "{-10..0}",
        regex:     /^(?:-10|(?!-0)-[0-9]|0)$/,
        matches:   ["0", "-1", "-10"],
        unmatches: ["1", "-0", "-11"],
    },
    {
        skip,
        pattern:   "{0..-2357}",
        regex:     /^(?:-235[0-7]|-23[0-4][0-9]|-2[0-2][0-9]{2}|(?!-0)(?!0\d)-1?[0-9]{1,3}|0)$/,
        matches:
        [
            "0",
            "-1",
            "-10",
            "-20",
            "-300",
            "-999",
            "-1000",
            "-2000",
            "-2300",
            "-2350",
            "-2357",
        ],
        unmatches:
        [
            "00",
            "000",
            "0000",
            "1",
            "-2358",
            "-2360",
            "-2400",
            "-3000",
        ],
    },
    {
        skip,
        pattern:   "{0..9}",
        regex:     /^(?:[0-9])$/,
        matches:   ["0", "5", "9"],
        unmatches: ["-1", "10"],
    },
    {
        skip,
        pattern:   "{000..9}",
        regex:     /^(?:00[0-9])$/,
        matches:   ["000", "005", "009"],
        unmatches: ["-001", "010"],
    },
    {
        skip,
        pattern:   "{0..10}",
        regex:     /^(?:10|[0-9])$/,
        matches:   ["1", "10"],
        unmatches: ["-1", "11"],
    },
    {
        skip,
        pattern:   "{000..10}",
        regex:     /^(?:010|00[0-9])$/,
        matches:   ["000", "001", "010"],
        unmatches: ["-1", "0", "1", "10", "011"],
    },
    {
        skip,
        pattern:   "{0..20}",
        regex:     /^(?:20|1?[0-9])$/,
        matches:   ["0", "5", "10", "15", "20"],
        unmatches: ["-1", "21"],
    },
    {
        skip,
        pattern:   "{0..020}",
        regex:     /^(?:020|0[01][0-9])$/,
        matches:   ["000", "005", "010", "015", "020"],
        unmatches: ["-01", "021"],
    },
    {
        skip,
        pattern:   "{0..50}",
        regex:     /^(?:50|[1-4]?[0-9])$/,
        matches:   ["0", "25", "50"],
        unmatches: ["-1", "51"],
    },
    {
        skip,
        pattern:   "{00..50}",
        regex:     /^(?:50|[0-4][0-9])$/,
        matches:   ["00", "05", "25", "50"],
        unmatches: ["-1", "0", "5", "51"],
    },
    {
        skip,
        pattern:   "{0..100}",
        regex:     /^(?:100|(?!0\d)[0-9]{1,2})$/,
        matches:   ["0", "5", "10", "50", "100"],
        unmatches: ["-1", "101", "110", "150", "200"],
    },
    {
        skip,
        pattern:   "{000..100}",
        regex:     /^(?:100|0[0-9]{2})$/,
        matches:   ["000", "005", "010", "050", "100"],
        unmatches: ["-1", "0", "5", "10", "50", "101"],
    },
    {
        skip,
        pattern:   "{0..2357}",
        regex:     /^(?:235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|(?!0\d)1?[0-9]{1,3})$/,
        matches:
        [
            "0",
            "1",
            "10",
            "20",
            "300",
            "999",
            "1000",
            "2000",
            "2300",
            "2350",
            "2357",
        ],
        unmatches:
        [
            "00",
            "000",
            "0000",
            "-1",
            "2358",
            "2360",
            "2400",
            "3000",
        ],
    },
    {
        skip,
        pattern: "{00..2357}",
        regex:   /^(?:235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|1?[0-9]{3}|[0-9]{2})$/,
        matches:
        [
            "00",
            "01",
            "10",
            "20",
            "300",
            "999",
            "1000",
            "2000",
            "2300",
            "2350",
            "2357",
        ],
        unmatches:
        [
            "-01",
            "2358",
            "2360",
            "2400",
            "3000",
        ],
    },
    {
        skip,
        pattern: "{0000..2357}",
        regex:   /^(?:235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|[01][0-9]{3})$/,
        matches:
        [
            "0000",
            "0001",
            "0010",
            "0020",
            "0300",
            "0999",
            "1000",
            "2000",
            "2300",
            "2350",
            "2357",
        ],
        unmatches:
        [
            "-001",
            "2358",
            "2360",
            "2400",
            "3000",
        ],
    },
    {
        skip,
        pattern:   "{0..100500}",
        regex:     /^(?:100500|100[0-4][0-9]{2}|10|(?!0\d)[0-9]{1,5})$/,
        matches:
        [
            "0",
            "1",
            "5",
            "10",
            "50",
            "100",
            "500",
            "1000",
            "5000",
            "10000",
            "100005",
            "100050",
            "100500",
        ],
        unmatches:
        [
            "-1",
            "100501",
            "100600",
            "101000",
            "110000",
            "200000",
        ],
    },
    {
        skip,
        pattern:   "{5..15}",
        regex:     /^(?:1[0-5]|[5-9])$/,
        matches:   ["5", "10", "15"],
        unmatches: ["0", "4", "16", "20"],
    },
    {
        skip,
        pattern:   "{005..15}",
        regex:     /^(?:01[0-5]|00[5-9])$/,
        matches:   ["005", "010", "015"],
        unmatches: ["0", "4", "16", "20", "5", "10", "15"],
    },
    {
        skip,
        pattern:   "{10..20}",
        regex:     /^(?:20|1[0-9])$/,
        matches:   ["10", "15", "20"],
        unmatches: ["5", "25"],
    },
    {
        skip,
        pattern:   "{-15..-25}",
        regex:     /^(?:-2[0-5]|-1[5-9])$/,
        matches:   ["-15", "-20", "-25"],
        unmatches: ["0", "-14", "-26"],
    },
    {
        skip,
        pattern:   "{15..25}",
        regex:     /^(?:2[0-5]|1[5-9])$/,
        matches:   ["15", "20", "25"],
        unmatches: ["0", "14", "26"],
    },
    {
        skip,
        pattern:   "{015..25}",
        regex:     /^(?:02[0-5]|01[5-9])$/,
        matches:   ["015", "020", "025"],
        unmatches: ["000", "014", "026", "15", "20", "25"],
    },
    {
        skip,
        pattern:   "{19..25}",
        regex:     /^(?:2[0-5]|19)$/,
        matches:   ["19", "20", "25"],
        unmatches: ["0", "18", "26"],
    },
    {
        skip,
        pattern:   "{019..25}",
        regex:     /^(?:02[0-5]|019)$/,
        matches:   ["019", "020", "025"],
        unmatches: ["0", "018", "026", "19", "20", "25"],
    },
    {
        skip,
        pattern: "{46..2357}",
        regex:   /^(?:235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|(?!0\d)1[0-9]{3}|[1-9][0-9]{2}|4[6-9]|[5-9][0-9])$/,
        matches:
        [
            "46",
            "50",
            "75",
            "100",
            "200",
            "500",
            "1000",
            "1500",
            "2000",
            "2300",
            "2350",
            "2357",
        ],
        unmatches:
        [
            "0",
            "5",
            "10",
            "40",
            "45",
            "2358",
            "2360",
            "2400",
            "4000",
        ],
    },
    {
        skip,
        pattern: "{00046..2357}",
        regex:   /^(?:0235[0-7]|023[0-4][0-9]|02[0-2][0-9]{2}|01[0-9]{3}|00[1-9][0-9]{2}|0004[6-9]|000[5-9][0-9])$/,
        matches:
        [
            "00046",
            "00050",
            "00075",
            "00100",
            "00200",
            "01000",
            "02000",
            "02300",
            "02350",
            "02357",
        ],
        unmatches:
        [
            "0",
            "5",
            "10",
            "40",
            "45",
            "2358",
            "2360",
            "2400",
            "4000",
            "00000",
            "00005",
            "00010",
            "00040",
            "00045",
            "02358",
            "02360",
            "02400",
            "04000",
        ],
    },
    {
        skip,
        pattern: "{246..2357}",
        regex:   /^(?:235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|(?!0\d)1[0-9]{3}|24[6-9]|2[5-9][0-9]|[3-9][0-9]{2})$/,
        matches:
        [
            "246",
            "250",
            "300",
            "500",
            "1000",
            "1500",
            "2000",
            "2300",
            "2350",
            "2357",
        ],
        unmatches:
        [
            "0",
            "5",
            "10",
            "40",
            "45",
            "46",
            "50",
            "75",
            "100",
            "200",
            "240",
            "245",
            "2358",
            "2360",
            "2400",
            "3000",
            "4000",
        ],
    },
    {
        skip,
        pattern: "{46..23579}",
        regex:   /^(?:2357[0-9]|235[0-6][0-9]|23[0-4][0-9]{2}|2[0-2][0-9]{3}|(?!0\d)1[0-9]{4}|[1-9][0-9]{2,3}|4[6-9]|[5-9][0-9])$/,
        matches:
        [
            "46",
            "50",
            "75",
            "100",
            "200",
            "500",
            "1000",
            "1500",
            "2000",
            "2300",
            "2350",
            "2357",
            "5000",
            "10000",
            "15000",
            "20000",
            "23000",
            "23500",
            "23570",
            "23579",
        ],
        unmatches:
        [
            "0",
            "5",
            "10",
            "40",
            "45",
            "23580",
            "23600",
            "24000",
            "30000",
            "50000",
            "99999",
        ],
    },
    {
        skip,
        pattern: "{1246..2357}",
        regex:   /^(?:235[0-7]|23[0-4][0-9]|2[0-2][0-9]{2}|124[6-9]|12[5-9][0-9]|1[3-9][0-9]{2})$/,
        matches:
        [
            "1246",
            "1250",
            "1275",
            "1300",
            "2000",
            "2357",
        ],
        unmatches:
        [
            "1",
            "100",
            "200",
            "1245",
            "2358",
            "3000",
        ],
    },
    {
        skip,
        pattern: "{1246..-2357}",
        regex:   /^(?:-235[0-7]|-23[0-4][0-9]|-2[0-2][0-9]{2}|(?!-0)(?!0\d)-1?[0-9]{1,3}|0|124[0-6]|12[0-3][0-9]|1[0-1][0-9]{2}|(?!0\d)[0-9]{1,3})$/,
        matches:
        [
            "1246",
            "1240",
            "1200",
            "1000",
            "500",
            "100",
            "50",
            "10",
            "0",
            "-10",
            "-50",
            "-100",
            "-500",
            "-1000",
            "-1500",
            "-2000",
            "-2300",
            "-2350",
            "-2357",
        ],
        unmatches:
        [
            "2000",
            "1300",
            "1250",
            "1247",
            "-0",
            "-2358",
            "-2360",
            "-2400",
            "-3000",
        ],
    },
    {
        skip,
        pattern: "!{1246..-2357}",
        regex:   /^(?!^(?:-235[0-7]|-23[0-4][0-9]|-2[0-2][0-9]{2}|(?!-0)(?!0\d)-1?[0-9]{1,3}|0|124[0-6]|12[0-3][0-9]|1[0-1][0-9]{2}|(?!0\d)[0-9]{1,3})$).*$/,
        matches:
        [
            "2000",
            "1300",
            "1250",
            "1247",
            "-0",
            "-2358",
            "-2360",
            "-2400",
            "-3000",
        ],
        unmatches:
        [
            "1246",
            "1240",
            "1200",
            "1000",
            "500",
            "100",
            "50",
            "10",
            "0",
            "-10",
            "-50",
            "-100",
            "-500",
            "-1000",
            "-1500",
            "-2000",
            "-2300",
            "-2350",
            "-2357",
        ],
    },
    {
        skip,
        pattern:   "**/file-{000..100}.{js,ts}",
        regex:     /^.*(?:\/|\\)?file-(?:100|0[0-9]{2})\.(?:js|ts)$/,
        matches:   ["file-000.ts", "foo/file-050.js", "foo/bar/file-100.ts"],
        unmatches: ["foo", "bar", "bar/foobar/bar"],
    },
    {
        skip,
        pattern:   "{-10..10..5}",
        regex:     /^(?:-10|-5|0|5|10)$/,
        matches:   ["-10", "-5", "0", "5", "10"],
        unmatches: ["-7", "-3", "3", "7"],
    },
    {
        skip,
        pattern:   "{0..9..2}",
        regex:     /^(?:[02468])$/,
        matches:   ["0", "2", "4", "6", "8"],
        unmatches: ["1", "5", "7", "10"],
    },
    {
        skip,
        pattern:   "{0..20..5}",
        regex:     /^(?:0|5|10|15|20)$/,
        matches:   ["0", "5", "10", "15", "20"],
        unmatches: ["3", "7", "13", "17"],
    },
    {
        skip,
        pattern:   "{000..20..5}",
        regex:     /^(?:000|005|010|015|020)$/,
        matches:   ["000", "005", "010", "015", "020"],
        unmatches: ["3", "003", "7", "007", "13", "013", "17", "017"],
    },
];
