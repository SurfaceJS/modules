/* eslint-disable max-lines */
/* eslint-disable no-empty-character-class */
/* eslint-disable no-control-regex */
// cSpell:ignore AGMSY, ekqw
const skip = false;

export type Scenario =
{
    pattern:   string,
    matches:   string[],
    regex:     RegExp,
    mismatches: string[],
    skip:      boolean,
};

export const scenarios: Scenario[] =
[
    {
        skip,
        pattern:    "",
        regex:      /^$/,
        matches:    [],
        mismatches: ["bar"],
    },
    {
        skip,
        pattern:    "foo",
        regex:      /^foo$/,
        matches:    ["foo"],
        mismatches: ["bar"],
    },
    {
        skip,
        pattern:    "?oo",
        regex:      /^.oo$/,
        matches:    ["boo", "foo"],
        mismatches: ["oo"],
    },
    {
        skip,
        pattern:    "*",
        regex:      /^[^\/\\]*$/,
        matches:    ["boo", "foo"],
        mismatches: [],
    },
    {
        skip,
        pattern:    "*oo",
        regex:      /^[^\/\\]*oo$/,
        matches:    ["boo", "foo"],
        mismatches: ["oof"],
    },
    {
        skip,
        pattern:    "[fb]oo",
        regex:      /^[fb]oo$/,
        matches:    ["boo", "foo"],
        mismatches: ["too", "soo"],
    },
    {
        skip,
        pattern:    "[^fb]oo",
        regex:      /^[^fb]oo$/,
        matches:    ["too", "soo"],
        mismatches: ["boo", "foo"],
    },
    {
        skip,
        pattern:    "[!fb]oo",
        regex:      /^[^fb]oo$/,
        matches:    ["too", "soo"],
        mismatches: ["boo", "foo"],
    },
    {
        skip,
        pattern:    "[]",
        regex:      /^[]$/,
        matches:    [],
        mismatches: ["", "."],
    },
    {
        skip,
        pattern:    "[[]oo",
        regex:      /^[\[]oo$/,
        matches:    ["[oo"],
        mismatches: ["]oo"],
    },
    {
        skip,
        pattern:    "[]]oo",
        regex:      /^[\]]oo$/,
        matches:    ["]oo"],
        mismatches: ["[oo"],
    },
    {
        skip,
        pattern:    "[a\\]]oo",
        regex:      /^[a\]]oo$/,
        matches:    ["aoo", "]oo"],
        mismatches: ["a[oo"],
    },
    {
        skip,
        pattern:    "[a-z]]oo",
        regex:      /^[a-z]\]oo$/,
        matches:    ["a]oo"],
        mismatches: ["]oo"],
    },
    {
        skip,
        pattern:    "[a",
        regex:      /^\[a$/,
        matches:    ["[a"],
        mismatches: ["[", "a"],
    },
    {
        skip,
        pattern:    "[:a",
        regex:      /^\[:a$/,
        matches:    ["[:a"],
        mismatches: ["[", ":", "a"],
    },
    {
        skip,
        pattern:    "[:alnum:]",
        regex:      /^[A-Za-z0-9]$/,
        matches:    ["a", "z", "A", "Z", "0", "9"],
        mismatches: [".", "!"],
    },
    {
        skip,
        pattern:    "[:alpha:]",
        regex:      /^[A-Za-z]$/,
        matches:    ["a", "z", "A", "Z"],
        mismatches: ["1", "."],
    },
    {
        skip,
        pattern:    "[:ascii:]",
        regex:      /^[\x00-\x7F]$/,
        matches:    ["\x00", "\x7F"],
        mismatches: ["\x8A"],
    },
    {
        skip,
        pattern:    "[:blank:]",
        regex:      /^[ \t]$/,
        matches:    ["\t", " "],
        mismatches: ["."],
    },
    {
        skip,
        pattern:    "[:cntrl:]",
        regex:      /^[\x00-\x1F\x7F]$/,
        matches:    ["\x00", "\x1F", "\x7F"],
        mismatches: ["\x2A", "\x8A"],
    },
    {
        skip,
        pattern:    "[:digit:]",
        regex:      /^\d$/,
        matches:    ["0", "9"],
        mismatches: ["A", "Z"],
    },
    {
        skip,
        pattern:    "[:graph:]",
        regex:      /^[\x21-\x7E]$/,
        matches:    ["\x21", "\x7E"],
        mismatches: ["\x20", "\x8A"],
    },
    {
        skip,
        pattern:    "[:lower:]",
        regex:      /^[a-z]$/,
        matches:    ["a", "z"],
        mismatches: ["A", "Z"],
    },
    {
        skip,
        pattern:    "[:print:]",
        regex:      /^[\x20-\x7E]$/,
        matches:    ["\x20", "\x7E"],
        mismatches: ["\x1F", "\x7F"],
    },
    {
        skip,
        pattern:    "[:punct:]",
        regex:      /^[^ A-Za-z0-9]$/,
        matches:    [".", ",", "!", "?"],
        mismatches: ["a", "0"],
    },
    {
        skip,
        pattern:    "[:space:]",
        regex:      /^\s$/,
        matches:    [" "],
        mismatches: ["a"],
    },
    {
        skip,
        pattern:    "[:upper:]",
        regex:      /^[A-Z]$/,
        matches:    ["A", "Z"],
        mismatches: ["a", "z"],
    },
    {
        skip,
        pattern:    "[:word:]",
        regex:      /^\w$/,
        matches:    ["A", "0", "_"],
        mismatches: ["-", "."],
    },
    {
        skip,
        pattern:    "[:xdigit:]",
        regex:      /^[0-9a-fA-F]$/,
        matches:    ["0", "F", "C"],
        mismatches: ["G", "10"],
    },
    {
        skip,
        pattern:    "(a|b)",
        regex:      /^\(a\|b\)$/,
        matches:    ["(a|b)"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "@a",
        regex:      /^@a$/,
        matches:    ["@a"],
        mismatches: ["@", "a"],
    },
    {
        skip,
        pattern:    "@(a",
        regex:      /^@\(a$/,
        matches:    ["@(a"],
        mismatches: ["@", "(", "a"],
    },
    {
        skip,
        pattern:    "@(a|b)",
        regex:      /^(?:a|b)$/,
        matches:    ["a", "b"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "@(@(a|b))",
        regex:      /^(?:(?:a|b))$/,
        matches:    ["a", "b"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "@(a\\|b)",
        regex:      /^(?:a\|b)$/,
        matches:    ["a|b"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "@((a\\|b))",
        regex:      /^(?:\(a\|b\))$/,
        matches:    ["(a|b)"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "@((a\\|b\\)|@(a|b)|a\\|b)",
        regex:      /^(?:\(a\|b\)|(?:a|b)|a\|b)$/,
        matches:    ["(a|b)", "a|b", "a", "b"],
        mismatches: ["ab"],
    },
    {
        skip,
        pattern:    "?(a|b)",
        regex:      /^(?:a|b)?$/,
        matches:    ["", "a", "b"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "?(?(a|b))",
        regex:      /^(?:(?:a|b)?)?$/,
        matches:    ["", "a", "b"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "?(a\\|b)",
        regex:      /^(?:a\|b)?$/,
        matches:    ["", "a|b"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "?((a\\|b))",
        regex:      /^(?:\(a\|b\))?$/,
        matches:    ["", "(a|b)"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "?((a\\|b\\)|?(a|b)|a\\|b)",
        regex:      /^(?:\(a\|b\)|(?:a|b)?|a\|b)?$/,
        matches:    ["", "(a|b)", "a|b", "a", "b"],
        mismatches: ["ab"],
    },
    {
        skip,
        pattern:    "*(a|b)",
        regex:      /^(?:a|b)*$/,
        matches:    ["", "a", "b", "aa", "bb"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "*(*(a|b))",
        regex:      /^(?:(?:a|b)*)*$/,
        matches:    ["", "a", "b", "aa", "bb"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "*(a\\|b)",
        regex:      /^(?:a\|b)*$/,
        matches:    ["", "a|b", "a|ba|b"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "*((a\\|b))",
        regex:      /^(?:\(a\|b\))*$/,
        matches:    ["", "(a|b)"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:   "*((a\\|b\\)|*(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)*|a\|b)*$/,
        matches:
        [
            "",
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "aa",
            "bb",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
        mismatches: ["|"],
    },
    {
        skip,
        pattern:    "+(a|b)",
        regex:      /^(?:a|b)+$/,
        matches:    ["a", "b", "aa", "bb"],
        mismatches: ["", "c"],
    },
    {
        skip,
        pattern:    "+(+(a|b))",
        regex:      /^(?:(?:a|b)+)+$/,
        matches:    ["a", "b", "aa", "bb"],
        mismatches: ["", "c"],
    },
    {
        skip,
        pattern:    "+(a\\|b)",
        regex:      /^(?:a\|b)+$/,
        matches:    ["a|b", "a|ba|b"],
        mismatches: ["", "a", "b"],
    },
    {
        skip,
        pattern:    "+((a\\|b))",
        regex:      /^(?:\(a\|b\))+$/,
        matches:    ["(a|b)"],
        mismatches: ["", "a", "b"],
    },
    {
        skip,
        pattern:   "+((a\\|b\\)|+(a|b)|a\\|b)",
        regex:     /^(?:\(a\|b\)|(?:a|b)+|a\|b)+$/,
        matches:
        [
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "aa",
            "bb",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
        mismatches: [""],
    },
    {
        skip,
        pattern:    "!(a|b)",
        regex:      /^(?:(?!a|b).*)$/,
        matches:    ["c"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "!(!(a|b))",
        regex:      /^(?:(?!(?:(?!a|b).*)).*)$/,
        matches:    ["a", "b"],
        mismatches: ["c"],
    },
    {
        skip,
        pattern:    "!(a\\|b)",
        regex:      /^(?:(?!a\|b).*)$/,
        matches:    ["", "a", "b"],
        mismatches: ["a|b", "a|ba|b"],
    },
    {
        skip,
        pattern:    "!((a\\|b))",
        regex:      /^(?:(?!\(a\|b\)).*)$/,
        matches:    ["", "a", "b"],
        mismatches: ["(a|b)"],
    },
    {
        skip,
        pattern:   "!((a\\|b\\)|!(a|b)|a\\|b)",
        regex:     /^(?:(?!\(a\|b\)|(?:(?!a|b).*)|a\|b).*)$/,
        matches:
        [
            "a",
            "b",
            "ab",
            "aa|b",
            "ba|b",
            "aa",
            "bb",
        ],
        mismatches:
        [
            "a|b",
            "a|b(a|b)",
            "(a|b)",
            "a|ba|b",
            "(a|b)(a|b)",
        ],
    },
    {
        skip,
        pattern:    "/foo",
        regex:      /^(?:\/|\\)foo$/,
        matches:    ["/foo"],
        mismatches: ["foo"],
    },
    {
        skip,
        pattern:    "/foo/*",
        regex:      /^(?:\/|\\)foo(?:\/|\\)[^\/\\]*$/,
        matches:    ["/foo/bar"],
        mismatches: ["foo"],
    },
    {
        skip,
        pattern:    "/foo/*/bar",
        regex:      /^(?:\/|\\)foo(?:\/|\\)[^\/\\]*(?:\/|\\)bar$/,
        matches:    ["/foo/baz/bar"],
        mismatches: ["/foo", "bar", "/foo/bar", "/foo/baz/baz/bar"],
    },
    {
        skip,
        pattern:    "/foo/**",
        regex:      /^(?:\/|\\)foo(?:\/|\\).*(?:\/|\\)?$/,
        matches:    ["/foo/bar", "/foo/bar/baz"],
        mismatches: ["foo"],
    },
    {
        skip,
        pattern:    "**/foo",
        regex:      /^.*(?:\/|\\)?foo$/,
        matches:    ["bar/foo"],
        mismatches: ["bar"],
    },
    {
        skip,
        pattern:    "**/foo/**",
        regex:      /^.*(?:\/|\\)?foo(?:\/|\\).*(?:\/|\\)?$/,
        matches:    ["bar/foo/bar"],
        mismatches: ["foo"],
    },
    {
        skip,
        pattern:    "**/foo/**/bar",
        regex:      /^.*(?:\/|\\)?foo(?:\/|\\).*(?:\/|\\)?bar$/,
        matches:    ["bar/foo/bar", "bar/foo/baz/bar"],
        mismatches: ["foo", "bar", "bar/foobar/bar"],
    },
    {
        skip,
        pattern:    "{a,b",
        regex:      /^\{a,b$/,
        matches:    ["{a,b"],
        mismatches: ["a", "b"],
    },
    {
        skip,
        pattern:    "{a,b}",
        regex:      /^(?:a|b)$/,
        matches:    ["a", "b"],
        mismatches: ["(a|b)"],
    },
    {
        skip,
        pattern:    "a{,b,c}d",
        regex:      /^a(?:b|c)?d$/,
        matches:    ["ad", "abd", "acd"],
        mismatches: ["a", "d", "abcd"],
    },
    {
        skip,
        pattern:    "{a..c}",
        regex:      /^(?:[a-c])$/,
        matches:    ["a", "b", "c"],
        mismatches: ["d"],
    },
    {
        skip,
        pattern:    "{Z..a}",
        regex:      /^(?:[Z[\]\^_`a])$/,
        matches:    ["Z", "[", "]", "^", "_", "`", "a"],
        mismatches: ["A", "z"],
    },
    {
        skip,
        pattern:    "{A..z..6}",
        regex:      /^(?:[AGMSY_ekqw])$/,
        matches:    ["A", "G", "M", "S", "Y", "_", "e", "k", "q", "w"],
        mismatches: ["B", "F", "b", "f"],
    },
    {
        skip:       true,
        pattern:    "**/file-{000..100}.{js,ts}",
        regex:      /^.*(?:\/|\\)?file-(?:100|0[0-9]{2})\.(?:js|ts)$/,
        matches:    ["file-000.ts", "foo/file-050.js", "foo/bar/file-100.ts"],
        mismatches: ["foo", "bar", "bar/foobar/bar"],
    },
    {
        skip,
        pattern:    "{-10..10..5}",
        regex:      /^(?:-10|-5|0|5|10)$/,
        matches:    ["-10", "-5", "0", "5", "10"],
        mismatches: ["-7", "-3", "3", "7"],
    },
    {
        skip,
        pattern:    "{0..9..2}",
        regex:      /^(?:[02468])$/,
        matches:    ["0", "2", "4", "6", "8"],
        mismatches: ["1", "5", "7", "10"],
    },
    {
        skip,
        pattern:    "{0..20..5}",
        regex:      /^(?:0|5|10|15|20)$/,
        matches:    ["0", "5", "10", "15", "20"],
        mismatches: ["3", "7", "13", "17"],
    },
    {
        skip,
        pattern:    "{000..20..5}",
        regex:      /^(?:000|005|010|015|020)$/,
        matches:    ["000", "005", "010", "015", "020"],
        mismatches: ["3", "003", "7", "007", "13", "013", "17", "017"],
    },
];
